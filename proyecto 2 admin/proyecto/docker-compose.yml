version: "3.9"

services:
  # ========================
  # üóÑÔ∏è Base de datos PostgreSQL
  # ========================
  db:
    image: postgres:16.4
    container_name: proyecto_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks:
      database_net:
        aliases:
          - proyecto_db

  # ========================
  # ‚öôÔ∏è Backend (FastAPI)
  # ========================
  backend:
    build:
      context: ./services/servicio-1
      dockerfile: Dockerfile
    container_name: proyecto_backend
    env_file:
      - .env
    environment:
      # IMPORTANTE: Usa ${} (no $${}) para que Compose interpole desde .env
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      # Aseg√∫rate de tener /health en tu FastAPI
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    networks:
      backend_net:
        aliases:
          - backend
          - proyecto_backend
      database_net:

  backend_2:
    build:
      context: ./services/servicio-1
      dockerfile: Dockerfile
    container_name: proyecto_backend_2
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    networks:
      backend_net:
        aliases:
          - backend_2
      database_net:

  # ========================
  # üíª Frontend (Nginx sirviendo build de Vite)
  # ========================
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: proyecto_frontend
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M
    networks:
      frontend_net:
        aliases:
          - frontend
          - proyecto_frontend

  # ========================
  # üåê API Gateway (Nginx)
  # ========================
  gateway:
    build:
      context: ./services/api-gateway
    container_name: proyecto_gateway
    ports:
      - "${GATEWAY_PORT}:80"
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
      backend_2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 128M
    networks:
      frontend_net:
      backend_net:

# ========================
# Vol√∫menes persistentes
# ========================
volumes:
  db_data:
  backup_data:

# ========================
# Redes separadas (aislamiento)
# ========================
networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge
  database_net:
    driver: bridge
